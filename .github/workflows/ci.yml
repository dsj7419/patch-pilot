# .github/workflows/ci.yml
name: CI / CD Pipeline

###############################################################################
#  🔔 Triggers
###############################################################################
on:
  push:
    branches:
      - main
      - release-*
    tags:
      - 'v*'       # v1.2.3 etc. — created by scripts/release.js
  pull_request:
    branches: [ main ]

###############################################################################
#  🧪 Build & Test (always)
###############################################################################
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: 📦 Install deps
        run: yarn install --frozen-lockfile

      - name: 🔍 Lint
        run: yarn lint

      - name: 🧪 Tests
        run: yarn test

      # Build a .vsix only when this run was triggered by a tag
      - name: 📦 Package extension
        if: startsWith(github.ref, 'refs/tags/v')
        run: yarn vsce package --no-dependencies

      - name: ⬆️ Upload VSIX
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: vsix-package
          path: "*.vsix"
          retention-days: 5

  ###############################################################################
  #  🚀 Publish & GitHub Release  ── runs only when the event ref is  refs/tags/v*
  ###############################################################################
  publish:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest          # Marketplace/OvSX CLIs require Linux
    permissions:
      contents: write               # allow upload of GitHub Release asset

    steps:
      # ────────── fail fast if PAT secrets are missing ──────────
      - name: 🛑 Verify Marketplace secrets
        shell: bash
        env:
          VSCODE_MARKETPLACE_PAT: ${{ secrets.VSCODE_MARKETPLACE_PAT }}
          OPEN_VSX_PAT:           ${{ secrets.OPEN_VSX_PAT }}
        run: |
          if [[ -z "$VSCODE_MARKETPLACE_PAT" || -z "$OPEN_VSX_PAT" ]]; then
            echo "❌ VS Code Marketplace or Open VSX PAT secret is missing."
            exit 1
          fi
          echo "✅ All publish secrets present."

      # ────────── checkout & toolchain ──────────
      - name: 🛎️ Checkout (full history)
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: 🏗️ Setup Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: 📦 Install deps
        run: yarn install --frozen-lockfile

      # ────────── get the VSIX built in the build job ──────────
      - name: ⬇️ Download VSIX artifact
        uses: actions/download-artifact@v4
        with: { name: vsix-package }

      - name: 🔎 Locate VSIX
        id: vsix
        shell: bash
        run: |
          VSIX=$(ls *.vsix | head -n1)
          echo "vsix=$VSIX" >>"$GITHUB_OUTPUT"
          echo "Found VSIX: $VSIX"

      # ────────── read flags embedded in the annotated tag ──────────
      - name: 🗂️ Parse tag JSON
        id: tag_meta
        shell: bash
        run: |
          # Get tag message contents
          TAG_JSON=$(git tag -l --format='%(contents)' "$GITHUB_REF_NAME")
          
          # Log the raw tag contents for debugging
          echo "Raw tag contents:"
          echo "$TAG_JSON"
          
          # Set default values
          PUBLISH="true"
          TYPE="feature"
          
          # Try to parse JSON with error handling
          if [[ -n "$TAG_JSON" ]]; then
            echo "tag_json=$TAG_JSON" >>"$GITHUB_OUTPUT"
            if echo "$TAG_JSON" | jq -e . >/dev/null 2>&1; then
              # Valid JSON - extract values
              PUBLISH=$(jq -r '.PUBLISH_MARKETPLACE // "true"' <<<"$TAG_JSON")
              TYPE=$(jq -r '.RELEASE_TYPE // "feature"' <<<"$TAG_JSON")
              echo "✅ Successfully parsed tag metadata"
            else
              echo "⚠️ Tag message is not valid JSON, using default values"
            fi
          else
            echo "⚠️ No tag message found, using default values"
          fi
          
          # Output the values that will be used
          echo "📊 Publishing to marketplace: $PUBLISH"
          echo "📊 Release type: $TYPE"
          echo "publish=$PUBLISH" >>"$GITHUB_OUTPUT"
          echo "rtype=$TYPE" >>"$GITHUB_OUTPUT"

      # ────────── Marketplace / Open VSX publish (optional) ──────────
      - name: 🚢 Publish to VS Code Marketplace
        if: steps.tag_meta.outputs.publish == 'true'
        run: |
          yarn vsce publish \
            --packagePath "${{ steps.vsix.outputs.vsix }}" \
            -p "${{ secrets.VSCODE_MARKETPLACE_PAT }}"

      - name: 🚢 Publish to Open VSX
        if: steps.tag_meta.outputs.publish == 'true'
        run: |
          yarn ovsx publish "${{ steps.vsix.outputs.vsix }}" \
            -p "${{ secrets.OPEN_VSX_PAT }}" \
            --timeout 300000

      # ────────── compose extra release notes (always sets body output) ──────────
      - name: ✍️ Prepare notes
        id: notes
        shell: bash
        run: |
          TYPE="${{ steps.tag_meta.outputs.rtype }}"
          PUBLISH="${{ steps.tag_meta.outputs.publish }}"
          BODY=""
          if [[ "$TYPE" == "infrastructure" ]]; then
            BODY="## Non-User-Facing Release\nInfrastructure / CI updates."
          elif [[ "$TYPE" == "developer" ]]; then
            BODY="## Developer-Tools Release\nDocs or tooling only."
          fi
          if [[ "$PUBLISH" == "false" ]]; then
            BODY="${BODY}\n\n**Note:** This version is *not* published to the VS Code Marketplace."
          fi
          echo "body<<EOF" >>"$GITHUB_OUTPUT"
          echo -e "$BODY"  >>"$GITHUB_OUTPUT"
          echo "EOF"       >>"$GITHUB_OUTPUT"

      # ────────── GitHub Release with VSIX asset ──────────
      - name: 📦 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files:  ${{ steps.vsix.outputs.vsix }}
          name:   ${{ steps.tag_meta.outputs.rtype == 'feature' && '' || format('[{0}] ', steps.tag_meta.outputs.rtype) }}Release ${{ github.ref_name }}
          body:   ${{ steps.notes.outputs.body }}
          draft: false
          prerelease: false
          generate_release_notes: true